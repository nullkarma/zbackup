#!/usr/bin/env python

"""
zbackup

    Usage:
        zbackup create <fs> [--configfile=<configfile>]
        zbackup destroy <fs> [--configfile=<configfile>]
        zbackup snap <fs> [--configfile=<configfile>]
        zbackup backup <fs> [--configfile=<configfile>]
        zbackup -h | --help
        zbackup --version
    Options:
        --configfile=<configfile>       [default: /etc/zbackup/config.yaml]
"""

import docopt
import sh
import yaml
import sys
import re
import shlex
import logging
from os import path, makedirs
from datetime import datetime
from subprocess import Popen, PIPE


def lexer(value):
    lex = shlex.shlex(value)
    lex.quotes = "'"
    lex.whitespace_split = True
    return list(lex)


def update_sync_config(conf):
    for k,v in [(item, conf.get(item, [])) for item in ["rsync_args", "exclude", "include"]]:
        try:
            config[k] += v
        except KeyError:
            config[k] = v

    n = conf.copy()
    for item in ["rsync_args", "exclude", "include"]:
        try:
            del n[item]
        except KeyError:
            pass

    config.update(n)


def merge_plans():
    for pname, pconfig in zconfig.iteritems():
        if not re.search(pname, filesystem):
            continue
        update_sync_config(pconfig.get('config').copy())

        try:
            for plan in pconfig.get('plans'):
                if not re.search(plan.get('match'), filesystem.rsplit('/', 1)[-1]):
                    continue

                if plan.get('plan'):
                    with open(plan.get('plan'), 'rb') as planconf:
                        config.update(yaml.load(planconf))
                else:
                    update_sync_config(plan.get('config').copy())

        except TypeError:
            pass


def create(fs):
    try:
        sh.zfs("create", fs)
    except sh.ErrorReturnCode_1:
        print "{} already exists".format(fs)

    for d in [metadata, path.join(mountpoint, 'files')]:
        if not path.exists(d):
            makedirs(d)

    dump_metadata()


def rotate_snapshots(fs):
    args = shlex.split("list -r -t snap -H -o name,creation {}".format(fs))

    log.info("Searching for expired snapshots...")
    snapshots = [s.split('\t') for s in sh.zfs(args).split('\n') if s]
    for sname, screation in snapshots:
        ctime = datetime.strptime(screation, "%a %b %d %H:%M %Y")
        delta = datetime.now() - ctime
        if delta.days < config.get('rotate'):
            continue

        log.info("Found expired snapshot: {}".format(sname))
        destroy(sname)


def snapshot(fs):
    snap_name = fs + '@' + datetime.now().strftime(config['snapname'])
    try:
        log.info("Snapshotting filesystem {}".format(fs))
        sh.zfs("snap", snap_name)
    except sh.ErrorReturnCode_1:
        log.error("Filesystem Snapshot ({}) failed!".format(snap_name))
        sys.exit(1)

    rotate_snapshots(fs)


def destroy(fs):
    try:
        log.info("Destroying {}".format(fs))
        sh.zfs("destroy", "-r", fs)
    except sh.ErrorReturnCode_1:
        log.error("Destroying ({}) failed!".format(fs))


def backup():
    if not path.exists(mountpoint):
        create(filesystem)

    rsync_include = '--include-from=' + path.join(metadata, 'include')
    rsync_exclude = '--exclude-from=' + path.join(metadata, 'exclude')
    rsync_agrs = ['--' + arg for arg in config['rsync_args']]
    rsync_user = config.get('rsync_user', 'root')
    remote = rsync_user + '@' + hostname + ':' + config['rsync_path']
    args = tuple(['rsync'] + rsync_agrs) + (rsync_include, rsync_exclude, remote, backupsdir)
    stdout, stderr = Popen(' '.join(args), shell=True, stdout=PIPE, stderr=PIPE).communicate()


def dump_metadata():
    with open(path.join(metadata, 'include'), 'wb') as incl:
        incl.writelines('\n'.join(config['include']))

    with open(path.join(metadata, 'exclude'), 'wb') as excl:
        excl.writelines('\n'.join(config['exclude']))

log = logging.getLogger('zbackup')
log.setLevel(logging.INFO)

if __name__ == '__main__':

    options = docopt.docopt(__doc__)
    configfile = options['--configfile']

    filesystem = options['<fs>']
    mountpoint = path.join('/', filesystem)
    metadata = path.join(mountpoint, '.zbackup')
    backupsdir = path.join(mountpoint, 'files')
    hostname = path.basename(mountpoint)

    with open(configfile, 'rb') as config_fd:
        zconfig = yaml.load(config_fd)

    config = zconfig['default']

    merge_plans()

    logdir = config['logdir']
    if not path.exists(logdir):
        makedirs(logdir)

    fh = logging.FileHandler(path.join(logdir, path.basename(filesystem) + '.log'))
    fh.setLevel(logging.DEBUG)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    fh.setFormatter(formatter)
    log.addHandler(fh)

    try:
        dump_metadata()
    except IOError:
        pass

    if options['create']:
        create(filesystem)

    if options['destroy']:
        pass

    if options['snap']:
        snapshot(filesystem)

    if options['backup']:
        #backup()
        #snapshot(filesystem)

        print config